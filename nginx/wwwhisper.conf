# Configures wwwhisper.

# ===================================================================
# 1. Enables authorization for all locations on the server. (with the
#    exception of locations annotated with 'auth request off;')
# ===================================================================

auth_request /wwwhisper/auth/api/is-authorized/;
auth_request_set $user $upstream_http_user;

# nginx does not allow to return result of the auth request to the
# user. To workaround this 401 and 403 errors re-execute the auth
# request.
error_page 401 /wwwhisper/auth/api/is-authorized/;
error_page 403 /wwwhisper/auth/api/is-authorized/;

# Allows only client to cache protected content.
add_header Cache-Control private;

# Disallows framing of protected web pages by sites from a different origin.
add_header X-Frame-Options SAMEORIGIN;

# Disallows guessing content type of protected resources.
add_header X-Content-Type-Options nosniff;

# Inserts a script that displays a user's email and a 'sign out'
# button. This can be removed, but than users needs to manually enter
# /auth/logout URL to signout.
sub_filter </body>
'
<!-- Inserts wwwhisper sign-out frame -->
<script src="/wwwhisper/auth/iframe.js"> </script>
</body>
';
sub_filter_once on;
sub_filter_last_modified on;

# ===================================================================
#  2. Exposes wwwhisper authorization API and static pages.  These
#     need to be available without authorization, so not authenticated
#     users can sign-in.
# ===================================================================

if ($http_user) {
   # Do not allow the client to overwrite authenticated user.
   return 400;
}


# Location to which nginx sends auth-requests.
location /wwwhisper/auth/api/is-authorized/ {
    auth_request off;
    sub_filter </body>
    '<!-- Powered by wwwhisper -->
    </body>';

    uwsgi_pass $wwwhisper_site_socket;
    uwsgi_modifier1 30;
    include uwsgi_params;
    uwsgi_param REQUEST_METHOD GET;
    # request_uri contains a path with a query part (?foo=bar). The
    # query part is not needed, but nginx does not expose not rewritten
    # path without it.
    uwsgi_param QUERY_STRING path=$request_uri;
    uwsgi_param REQUEST_URI $document_uri?path=$request_uri;
    # Host is not validated by nginx, but wwwhisper does the
    # validation of the SITE_URL against explicitly allowed aliases.
    uwsgi_param HTTP_SITE_URL "$scheme://$http_host";
    uwsgi_param CONTENT_LENGTH 0;
    uwsgi_pass_request_body off;
    uwsgi_intercept_errors off;
    add_header noop "";
}

# Handles Login/Logout/Whoami API calls.
location /wwwhisper/auth/api {
    auth_request off;
    uwsgi_pass $wwwhisper_site_socket;
    uwsgi_param HTTP_SITE_URL "$scheme://$http_host";
    uwsgi_modifier1 30;
    include uwsgi_params;
    # Add fake header to overwrite higher level add_header directives.
    # wwwhisper sets all required headers by itself.
    add_header noop "";
}

# Static resources (html, js, css) used during login and logout
# process.
location /wwwhisper/auth {
    auth_request off;
    # Do not inject iframe to auth sites (this prevents iframe to be
    # injected into iframe).
    sub_filter </body>
'<!-- Powered by wwwhisper -->
</body>
';
    sub_filter_once on;

    alias   $wwwhisper_root/www_static/auth/;
    charset utf-8;
    expires 24h;

    # Make pages accessible also without .html suffix.
    location = /wwwhisper/auth/logout {
      alias $wwwhisper_root/www_static/auth/logout.html;
      default_type text/html;
    }
    location = /wwwhisper/auth/goodbye {
      alias $wwwhisper_root/www_static/auth/goodbye.html;
      default_type text/html;
    }
    location = /wwwhisper/auth/login {
      alias $wwwhisper_root/www_static/auth/login_check_token.html;
      default_type text/html;
    }
}

# ===================================================================
# 3. Enables the wwwhisper admin application (accessible via
#    http[s]://site.url/wwwhisper/admin/).
# ===================================================================

# Handles admin API calls.
location /wwwhisper/admin/api {
    uwsgi_pass $wwwhisper_site_socket;
    uwsgi_modifier1 30;
    include uwsgi_params;
    # This is equivalent of a proxy configuration directive:
    # proxy_set_header User $user.
    uwsgi_param HTTP_USER $user;
    uwsgi_param HTTP_SITE_URL "$scheme://$http_host";
    add_header noop "";
}

# Static resources (html, js, css) used by the admin application.
location /wwwhisper/admin {
  alias   $wwwhisper_root/www_static/admin/;
  charset utf-8;
  expires 24h;
}
